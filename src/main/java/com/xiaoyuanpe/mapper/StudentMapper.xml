<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoyuanpe.mapper.StudentMapper">
  <resultMap id="BaseResultMap" type="com.xiaoyuanpe.pojo.Student">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="school_id" jdbcType="INTEGER" property="schoolId" />
    <result column="college_id" jdbcType="INTEGER" property="collegeId" />
    <result column="classes_id" jdbcType="INTEGER" property="classesId" />
    <result column="student_name" jdbcType="VARCHAR" property="studentName" />
    <result column="student_number" jdbcType="VARCHAR" property="studentNumber" />
    <result column="term" jdbcType="INTEGER" property="term" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="start_year" jdbcType="TIMESTAMP" property="startYear" />
    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
    <result column="grade_number" jdbcType="INTEGER" property="gradeNumber" />
    <result column="national_code" jdbcType="VARCHAR" property="nationalCode" />
    <result column="id_card" jdbcType="VARCHAR" property="idCard" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="school_name" jdbcType="VARCHAR" property="schoolName" />
    <result column="college_name" jdbcType="VARCHAR" property="collegeName" />
    <result column="classes_name" jdbcType="VARCHAR" property="classesName" />
  </resultMap>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, school_id, college_id, classes_id, student_name, student_number, term, sex, start_year, birthday, grade_number, national_code, id_card, address
  </sql>
  <select id="selectByExample" parameterType="com.xiaoyuanpe.pojo.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByPrimaryNumber" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from student
    where student_number = #{snumber,jdbcType=INTEGER}
  </select>

  <select id="selectByNumberAndSchool" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from student
    where student_number = #{snumber,jdbcType=INTEGER} and school_id = #{id, jdbcType=INTEGER}
  </select>

  <select id="selectBySchool" resultMap="BaseResultMap">
    select student.id as id, student.student_name as student_name, student.student_number as student_number,
    student.sex as sex, student.school_id as school_id, student.college_id as college_id,
    student.start_year as start_year, student.classes_id as classes_id, student.birthday as birthday,
    student.grade_number as grade_number, student.national_code as national_code, student.id_card as id_card,
    student.address as address, student.term as term, school.school_name as school_name,
    college.college_name as college_name, classes.class_name as classes_name
      from student, school, college, classes
    where student.school_id=#{id, jdbcType=INTEGER} and student.school_id=school.id
     and student.college_id=college.id and student.classes_id=classes.id
     and student.${columnName} LIKE concat('%',#{searchContent, jdbcType=VARCHAR},'%')
  </select>

  <select id="selectBySchoolInt" resultMap="BaseResultMap">
    select student.id as id, student.student_name as student_name, student.student_number as student_number,
    student.sex as sex, student.school_id as school_id, student.college_id as college_id,
    student.start_year as start_year, student.classes_id as classes_id, student.birthday as birthday,
    student.grade_number as grade_number, student.national_code as national_code, student.id_card as id_card,
    student.address as address, student.term as term, school.school_name as school_name,
    college.college_name as college_name, classes.class_name as classes_name
      from student, school, college, classes
    where student.school_id=#{id, jdbcType=INTEGER} and student.school_id=school.id
     and student.college_id=college.id and student.classes_id=classes.id
     and student.${columnName} LIKE concat('%',#{searchContent, jdbcType=VARCHAR},'%')
  </select>

  <select id="selectByCollege" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select student.id as id, student.student_name as student_name, student.student_number as student_number,
    student.sex as sex, student.school_id as school_id, student.college_id as college_id,
    student.start_year as start_year, student.classes_id as classes_id, student.birthday as birthday,
    student.grade_number as grade_number, student.national_code as national_code, student.id_card as id_card,
    student.address as address, student.term as term, school.school_name as school_name,
    college.college_name as college_name, classes.class_name as classes_name
      from student, school, college, classes
    where student.college_id=#{id, jdbcType=INTEGER} and student.school_id=school.id
     and student.college_id=college.id and student.classes_id=classes.id
  </select>

  <select id="selectByClass" parameterType="java.lang.Integer" resultMap="BaseResultMap">
   select student.id as id, student.student_name as student_name, student.student_number as student_number,
    student.sex as sex, student.school_id as school_id, student.college_id as college_id,
    student.start_year as start_year, student.classes_id as classes_id, student.birthday as birthday,
    student.grade_number as grade_number, student.national_code as national_code, student.id_card as id_card,
    student.address as address, student.term as term, school.school_name as school_name,
    college.college_name as college_name, classes.class_name as classes_name
      from student, school, college, classes
    where student.classes_id=#{id, jdbcType=INTEGER} and student.school_id=school.id
     and student.college_id=college.id and student.classes_id=classes.id
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiaoyuanpe.pojo.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiaoyuanpe.pojo.Student" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into student (id, school_id, college_id, classes_id, student_name, student_number,
      term, sex, start_year, birthday, grade_number, national_code, id_card, address)
    values (#{id,jdbcType=INTEGER}, #{schoolId,jdbcType=INTEGER}, #{collegeId,jdbcType=INTEGER}, 
      #{classesId,jdbcType=INTEGER}, #{studentName,jdbcType=VARCHAR}, #{studentNumber,jdbcType=VARCHAR}, 
      #{term,jdbcType=INTEGER}, #{sex,jdbcType=VARCHAR}, #{startYear,jdbcType=TIMESTAMP},#{birthday,jdbcType=TIMESTAMP},
      #{gradeNumber,jdbcType=INTEGER}, #{nationalCode,jdbcType=VARCHAR}, #{idCard,jdbcType=VARCHAR},
      #{address,jdbcType=VARCHAR})
  </insert>

  <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
    insert into student (id, school_id, college_id, classes_id, student_name, student_number,
    term, sex, start_year, birthday, grade_number, national_code, id_card, address)
    values
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.schoolId,jdbcType=INTEGER}, #{item.collegeId,jdbcType=INTEGER},
      #{item.classesId,jdbcType=INTEGER}, #{item.studentName,jdbcType=VARCHAR}, #{item.studentNumber,jdbcType=VARCHAR},
      #{item.term,jdbcType=INTEGER}, #{item.sex,jdbcType=VARCHAR}, #{item.startYear,jdbcType=TIMESTAMP},
      #{item.birthday,jdbcType=TIMESTAMP},#{item.gradeNumber,jdbcType=INTEGER}, #{item.nationalCode,jdbcType=VARCHAR},
      #{item.idCard,jdbcType=VARCHAR},#{item.address,jdbcType=VARCHAR})
    </foreach>
  </insert>

  <insert id="insertSelective" parameterType="com.xiaoyuanpe.pojo.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="schoolId != null">
        school_id,
      </if>
      <if test="collegeId != null">
        college_id,
      </if>
      <if test="classesId != null">
        classes_id,
      </if>
      <if test="studentName != null">
        student_name,
      </if>
      <if test="studentNumber != null">
        student_number,
      </if>
      <if test="term != null">
        term,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="startYear != null">
        start_year,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="schoolId != null">
        #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="collegeId != null">
        #{collegeId,jdbcType=INTEGER},
      </if>
      <if test="classesId != null">
        #{classesId,jdbcType=INTEGER},
      </if>
      <if test="studentName != null">
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentNumber != null">
        #{studentNumber,jdbcType=VARCHAR},
      </if>
      <if test="term != null">
        #{term,jdbcType=INTEGER},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="startYear != null">
        #{startYear,jdbcType=TIMESTAMP}
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiaoyuanpe.pojo.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.schoolId != null">
        school_id = #{record.schoolId,jdbcType=INTEGER},
      </if>
      <if test="record.collegeId != null">
        college_id = #{record.collegeId,jdbcType=INTEGER},
      </if>
      <if test="record.classesId != null">
        classes_id = #{record.classesId,jdbcType=INTEGER},
      </if>
      <if test="record.studentName != null">
        student_name = #{record.studentName,jdbcType=VARCHAR},
      </if>
      <if test="record.studentNumber != null">
        student_number = #{record.studentNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.term != null">
        term = #{record.term,jdbcType=INTEGER},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.startYear != null">
        start_year = #{record.startYear,jdbcType=TIMESTAMP},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set id = #{record.id,jdbcType=INTEGER},
      school_id = #{record.schoolId,jdbcType=INTEGER},
      college_id = #{record.collegeId,jdbcType=INTEGER},
      classes_id = #{record.classesId,jdbcType=INTEGER},
      student_name = #{record.studentName,jdbcType=VARCHAR},
      student_number = #{record.studentNumber,jdbcType=VARCHAR},
      term = #{record.term,jdbcType=INTEGER},
      sex = #{record.sex,jdbcType=VARCHAR},
      start_year = #{startYear,jdbcType=TIMESTAMP},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      grade_number = #{gradeNumber,jdbcType=INTEGER},
      national_code = #{nationalCode,jdbcType=VARCHAR},
      id_card = #{idCard,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiaoyuanpe.pojo.Student">
    update student
    <set>
      <if test="schoolId != null">
        school_id = #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="collegeId != null">
        college_id = #{collegeId,jdbcType=INTEGER},
      </if>
      <if test="classesId != null">
        classes_id = #{classesId,jdbcType=INTEGER},
      </if>
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentNumber != null">
        student_number = #{studentNumber,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        term = #{term,jdbcType=INTEGER},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="startYear != null">
        start_year = #{startYear,jdbcType=TIMESTAMP},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiaoyuanpe.pojo.Student">
    update student
    set school_id = #{schoolId,jdbcType=INTEGER},
      college_id = #{collegeId,jdbcType=INTEGER},
      classes_id = #{classesId,jdbcType=INTEGER},
      student_name = #{studentName,jdbcType=VARCHAR},
      student_number = #{studentNumber,jdbcType=VARCHAR},
      term = #{term,jdbcType=INTEGER},
      sex = #{sex,jdbcType=VARCHAR},
      start_year = #{startYear,jdbcType=TIMESTAMP},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      grade_number = #{gradeNumber,jdbcType=INTEGER},
      national_code = #{nationalCode,jdbcType=VARCHAR},
      id_card = #{idCard,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateBatch" parameterType="java.util.List">
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      update student
      set school_id = #{item.schoolId,jdbcType=INTEGER},
      college_id = #{item.collegeId,jdbcType=INTEGER},
      classes_id = #{item.classesId,jdbcType=INTEGER},
      student_name = #{item.studentName,jdbcType=VARCHAR},
      student_number = #{item.studentNumber,jdbcType=VARCHAR},
      term = #{item.term,jdbcType=INTEGER},
      sex = #{item.sex,jdbcType=VARCHAR},
      start_year = #{item.startYear,jdbcType=TIMESTAMP},
      birthday = #{item.birthday,jdbcType=TIMESTAMP},
      grade_number = #{item.gradeNumber,jdbcType=INTEGER},
      national_code = #{item.nationalCode,jdbcType=VARCHAR},
      id_card = #{item.idCard,jdbcType=VARCHAR},
      address = #{item.address,jdbcType=VARCHAR}
      where id = #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>

  <select id="selectLast" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from student
    ORDER BY id DESC LIMIT 1
  </select>

  <delete id="deleteByPrimaryKeys" parameterType="java.util.List">
    delete from student
    where id in
    <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>

</mapper>