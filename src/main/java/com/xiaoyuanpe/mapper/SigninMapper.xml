<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoyuanpe.mapper.SigninMapper">
  <resultMap id="BaseResultMap" type="com.xiaoyuanpe.pojo.Signin">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="student_id" jdbcType="INTEGER" property="studentId" />
    <result column="sign_time" jdbcType="TIMESTAMP" property="signTime" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
    <result column="signout_time" jdbcType="TIMESTAMP" property="signoutTime" />
    <result column="activity_id" jdbcType="INTEGER" property="activityId" />
    <result column="sport_id" jdbcType="INTEGER" property="sportId" />
    <result column="term" jdbcType="INTEGER" property="term" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, student_id, sign_time, flag, signout_time, activity_id, sport_id, term
  </sql>
  <select id="selectByExample" parameterType="com.xiaoyuanpe.pojo.SigninExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from signin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from signin
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="searchActivityOneWeekActivity" parameterType="java.lang.Integer"  resultType="java.lang.Integer">
    select SUM(diff)
    from (select TIMESTAMPDIFF(MINUTE,signin.signout_time,signin.sign_time) as diff
    from signin and activity
    where signin.signout_time between current_date()-7 and sysdate() and
    signin.student_id = #{studentId,jdbcType=INTEGER} and signin.flag = 2 and
    activity.id = activity.activity_id and activity.activity_class=#{clazz,jdbcType=INTEGER}) as aa
  </select>

  <select id="searchActivityOneWeekSport" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select SUM(diff)
    from(select TIMESTAMPDIFF(MINUTE,signin.signout_time,signin.sign_time) as diff
    from signin and sport
    where signin.signout_time between current_date()-7 and sysdate() and
    signin.student_id = #{studentId,jdbcType=INTEGER} and signin.flag = 2 and
    signin.sport_id = sport_id.id) as aa
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from signin
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiaoyuanpe.pojo.SigninExample">
    delete from signin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiaoyuanpe.pojo.Signin" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into signin (id, student_id, sign_time, 
      flag, signout_time, activity_id, 
      sport_id, term)
    values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{signTime,jdbcType=TIMESTAMP}, 
      #{flag,jdbcType=INTEGER}, #{signoutTime,jdbcType=TIMESTAMP}, #{activityId,jdbcType=INTEGER}, 
      #{sportId,jdbcType=INTEGER}, #{term,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xiaoyuanpe.pojo.Signin">
    insert into signin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="signTime != null">
        sign_time,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="signoutTime != null">
        signout_time,
      </if>
      <if test="activityId != null">
        activity_id,
      </if>
      <if test="sportId != null">
        sport_id,
      </if>
      <if test="term != null">
        term,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="signTime != null">
        #{signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="signoutTime != null">
        #{signoutTime,jdbcType=TIMESTAMP},
      </if>
      <if test="activityId != null">
        #{activityId,jdbcType=INTEGER},
      </if>
      <if test="sportId != null">
        #{sportId,jdbcType=INTEGER},
      </if>
      <if test="term != null">
        #{term,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiaoyuanpe.pojo.SigninExample" resultType="java.lang.Long">
    select count(*) from signin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update signin
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.signTime != null">
        sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.signoutTime != null">
        signout_time = #{record.signoutTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.activityId != null">
        activity_id = #{record.activityId,jdbcType=INTEGER},
      </if>
      <if test="record.sportId != null">
        sport_id = #{record.sportId,jdbcType=INTEGER},
      </if>
      <if test="record.term != null">
        term = #{record.term,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update signin
    set id = #{record.id,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      flag = #{record.flag,jdbcType=INTEGER},
      signout_time = #{record.signoutTime,jdbcType=TIMESTAMP},
      activity_id = #{record.activityId,jdbcType=INTEGER},
      sport_id = #{record.sportId,jdbcType=INTEGER},
      term = #{record.term,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiaoyuanpe.pojo.Signin">
    update signin
    <set>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="signTime != null">
        sign_time = #{signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="signoutTime != null">
        signout_time = #{signoutTime,jdbcType=TIMESTAMP},
      </if>
      <if test="activityId != null">
        activity_id = #{activityId,jdbcType=INTEGER},
      </if>
      <if test="sportId != null">
        sport_id = #{sportId,jdbcType=INTEGER},
      </if>
      <if test="term != null">
        term = #{term,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiaoyuanpe.pojo.Signin">
    update signin
    set student_id = #{studentId,jdbcType=INTEGER},
      sign_time = #{signTime,jdbcType=TIMESTAMP},
      flag = #{flag,jdbcType=INTEGER},
      signout_time = #{signoutTime,jdbcType=TIMESTAMP},
      activity_id = #{activityId,jdbcType=INTEGER},
      sport_id = #{sportId,jdbcType=INTEGER},
      term = #{term,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>